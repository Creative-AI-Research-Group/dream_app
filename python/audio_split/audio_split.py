#  audio_split.py
#  Copyright (c) 25/02/2020, 01:13.
#  Fabrizio Augusto Poltronieri  (fabrizio@fabriziopoltronieri.com)
#  Craig Vear (cvear@dmu.ac.uk)
#  Thom Corah (tcorah@dmu.ac.uk)

import json
import re
import argparse
import sys

sys.path.append('../utils/')

from SplitAudio import SplitAudio
from utils import check_slash


parser = argparse.ArgumentParser(description='I split audio files based on a speech-to-text JSON file generated by '
                                             'IBM Cloud')
parser.add_argument('-a', '--audio', required=True, type=str, help='The original audio file')
parser.add_argument('-w', '--wave_dir', required=True, type=str, help='WAV directory to save the .wav files')
parser.add_argument('-j', '--json', required=True, type=str, help='The original JSON file')
parser.add_argument('-p', '--json_wav', required=True, type=str, help='JSON file to store the processed data')

args = parser.parse_args()

AUDIO_FILE = args.audio
WAV_DIRECTORY = check_slash(args.wave_dir)
ORIGINAL_JSON_FILE = args.json
WAV_JSON_FILE = args.json_wav
split = SplitAudio(WAV_DIRECTORY, AUDIO_FILE)
counter_files = 0
arr = []

with open(ORIGINAL_JSON_FILE, "r") as json_content:
    json_data = json.load(json_content)

# get the info we need from the nested original JSON file from IBM
# this is not the cleverest solution, but works
for results in json_data['results'][0]['results']:
    for alternatives in results['alternatives']:
        try:
            transcript = alternatives['transcript']
            timestamps = []
            first = True

            for ts in alternatives['timestamps']:
                if ts[0] != '%HESITATION':
                    if first:
                        start_full_sentence = ts[1]
                        file_full_sentence = counter_files
                        first = False
                    file = re.sub('[^A-Za-z0-9._]+',
                                  '',
                                  '{}_{}.wav'.format('%03d' % counter_files, ts[0]))
                    timestamp = {
                        'word': ts[0],
                        'start': ts[1],
                        'end': ts[2],
                        'file': file[:-4]
                    }
                    timestamps.append(timestamp)
                    end_full_sentence = ts[2]
                    split.split_audio(ts[1], ts[2], file)

            final_transcript = {
                'transcript': {
                    'text': alternatives['transcript'],
                    'start': start_full_sentence,
                    'end': end_full_sentence,
                    'file': "{}_0_FULL_SENTENCE".format('%03d' % file_full_sentence),
                    'individual_timestamps': timestamps
                }
            }

            full_sentence_filename = final_transcript['transcript']['file'] + '.wav'

            split.split_audio(start_full_sentence,
                              end_full_sentence,
                              full_sentence_filename)

            arr.append(final_transcript)

            counter_files += 1

        except KeyError:
            break

final_json = {
    'results': arr
}

with open(WAV_JSON_FILE, 'w') as final_file:
    final_file.write(json.dumps(final_json, indent=4))
